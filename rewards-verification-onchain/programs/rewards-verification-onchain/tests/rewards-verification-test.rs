use anchor_lang::{system_program, solana_program::{self}, prelude::Pubkey};
use solana_program_test::{ProgramTest, processor, tokio};
use solana_sdk::{account::Account, instruction::Instruction, signature::Keypair, transaction::Transaction, signer::Signer};
use anchor_lang::InstructionData;
use anchor_lang::ToAccountMetas;

#[tokio::test]
async fn testing_rewards_verification() {
    let mut program = ProgramTest::new(
        "anchor rewards_verification_onchain",
        rewards_verification_onchain::id(),
        // the entrypoint function is generated by the #[program] macro
        processor!(rewards_verification_onchain::entry),
    );

    let system_program = system_program::ID;
    let token_program_id = anchor_spl::token::ID;
    let rent = solana_program::sysvar::rent::ID;
    let associated_token_program_id = anchor_spl::associated_token::ID;
    println!(
        "{} / {} / {} / {}",
        system_program, token_program_id, rent, associated_token_program_id
    );
    
    let owner = Keypair::new();

    program.add_account(
        owner.pubkey(),
        Account {
            lamports: 1_000_000_000,
            ..Account::default()
        },
    );
    //let global_state = Pubkey::find_program_address(&[b"seed"], &rewards_verification_onchain::id()).0;
    let proof_state = None;

    program.add_account(
        owner.pubkey(),
        Account {
            lamports: 1_000_000_000,
            ..Account::default()
        },
    );

    // https://docs.rs/solana-sdk/1.17.1/solana_sdk/instruction/struct.Instruction.html
    let verify_rewards_proof_ix = Instruction {
        program_id: rewards_verification_onchain::ID,
        data: rewards_verification_onchain::instruction::VerifyRewardsProof{}.data(),
        accounts: rewards_verification_onchain::accounts::VerifyRewardsProof {
            proof_state: proof_state,
            author: owner.pubkey(),
            system_program: system_program,
        }
        .to_account_metas(None),
    };
    let mut program_context = program.start_with_context().await;

}